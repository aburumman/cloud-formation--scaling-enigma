Description:
  Deploying a network infrastructure with cloud formation

Parameters:
  Environment:
    Description: An Environment 
    Type: String
    Default: "Test"
  vpcCidrBlock:
    Description: cidr range for vpc
    Type: String
    Default: "10.0.0.0/16"
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16 #!Ref cidr-block
      EnableDnsHostnames: true
      # Tags:
      #   - Key: Name
      #     Value: !Ref Environment
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "IGW"
  myIGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC
  privatesubnet1:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet1
  privatesubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Privatesubnet2"
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "public subnet1"
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "public Subnet2"
  NatgatewayEIP1:
    Type: AWS::EC2::EIP 
    DependsOn: myIGWattachment
    Properties:
      Domain: vpc
  NatgatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: myIGWattachment
    Properties:
      Domain: vpc
  Natgateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatgatewayEIP1.AllocationId
      SubnetId: !Ref publicSubnet1

  Natgateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatgatewayEIP2.AllocationId
      SubnetId: !Ref publicSubnet2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
        - Key: "Name"
          Value: "Public Route Table"
  DefaultPublicRoute:
    Type: AWS::EC2::Route 
    DependsOn: myIGWattachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet2

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Private route table 1"
  DefaultPrivateRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Default Private Route Table"

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DefaultPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Natgateway2
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref privatesubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Private Route Table2"
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Natgateway2

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http
      GroupName: InstanceSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
    # Tags: 
    #   - Tag
      VpcId: 
        vpc-0529fc9cbbcdfe12e
      # Fn::ImportValue:
      #   !Sub "${EnvironmentName}-VPCID"
      #Ref: myVPC
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow SSH and egress
      GroupName: WebServerSecrityGroup
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp 
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: 
        vpc-0529fc9cbbcdfe12e
        # Fn::ImportValue:
        #   !Sub "${EnvironmentName}-VPCID"


  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      # - Fn::ImportValue:
      #     !Sub "${EnvironmentName}-PrivateNets"
      # LaunchTemplate:
      #   LaunchTemplateId: !Ref myLaunchTemplate
      #   Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB

# myLaunchTemplate:
#   Type: AWS::EC2::LaunchTemplate
#   Properties: 
#     LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
#     LaunchTemplateData:
#       ImageId: !Ref LatestAmiId
#       InstanceType: !Ref InstanceType
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y 
          sysyemctl start apache2.service
          cd /var/www/html
          echo "The main server is up welcome" > index.html
      ImageId: ami-0ac73f33a1888c64a
      KeyName: udacity_key_pair
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs: 
          VolumeSize: '10'

Outputs:
  VPC:
    Description: A Reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: My-VPC-ID
  VPCPublicRouteTable:
    Description: A Reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: public-route-table
  VPCPrivateRouteTable1:
    Description: A Reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: private-route-table1
  VPCPrivateRouteTable2:
    Description: A Reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: PrivateRouteTable
  PublicSubnets:
    Description: A Reference to the created VPC
    Value: !Join [ ",", [ !Ref publicSubnet1, !Ref publicSubnet2 ]]
    Export:
      Name: PublicSubnets
  PrivateSubnets: 
    Description: A Reference to the created VPC
    Value: !Join [ ",", [ !Ref privatesubnet1, !Ref privatesubnet2 ]]
    Export:
      Name: privatesubnets
  PublicSubnet1:
    Description: A Reference to the created VPC
    Value: !Ref publicSubnet1
    Export:
      Name: publicSubnet1
  PublicSubnet2:
    Description: A Reference to the created VPC
    Value: !Ref publicSubnet2
    Export:
      Name: publicSubnet2
  PrivateSubnet1:
    Description: A Reference to the created VPC
    Value: !Ref privatesubnet1
    Export:
      Name: privatesubnet1
  PrivateSubnet2:
    Description: A Reference to the created VPC
    Value: !Ref privatesubnet2
    Export:
      Name: privatesubnet2


